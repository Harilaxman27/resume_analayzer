<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Analysis Results</title>
    <style>
        body {
            background-color: #f5f5f5;
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 20px 0;
            min-height: 100vh;
        }
        .container {
            background-color: white;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            max-width: 800px;
            width: 90%;
            margin: 0 auto;
        }
        h1 {
            color: #6c5ce7;
            font-size: 28px;
            margin-bottom: 20px;
            text-align: center;
        }
        .score-container {
            display: flex;
            justify-content: center;
            align-items: center;
            margin: 30px 0;
        }
        .circular-progress {
            position: relative;
            width: 150px;
            height: 150px;
        }
        .circular-progress svg {
            transform: rotate(-90deg);
        }
        .score-text {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 24px;
            font-weight: bold;
            color: #6c5ce7;
        }
        .analysis-content {
            background-color: #f8f8f8;
            padding: 20px;
            border-radius: 8px;
            border: 1px solid #e0e0e0;
            margin: 20px 0;
            font-size: 16px;
            line-height: 1.6;
            color: #333;
        }
        .analysis-content pre {
            white-space: pre-wrap;
            word-wrap: break-word;
            margin: 0;
            font-family: 'Arial', sans-serif;
        }
        .back-button {
            display: inline-block;
            margin-top: 20px;
            padding: 12px 24px;
            background-color: #6c5ce7;
            color: white;
            text-decoration: none;
            border-radius: 6px;
            transition: background-color 0.3s ease;
        }
        .back-button:hover {
            background-color: #5a4ad1;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Resume Analysis Results</h1>
        
        <div class="score-container">
            <div class="circular-progress">
                <svg width="150" height="150" viewBox="0 0 150 150">
                    <circle cx="75" cy="75" r="60" fill="none" stroke="#e0e0e0" stroke-width="10"/>
                    <circle cx="75" cy="75" r="60" fill="none" stroke="#6c5ce7" stroke-width="10" 
                            stroke-dasharray="376.991" id="score-circle"/>
                </svg>
                <div class="score-text">0/10</div>
            </div>
        </div>

        <div class="analysis-content">
            <pre><%= analysis %></pre>
        </div>

        <a href="/" class="back-button">Analyze Another Resume</a>
    </div>

    <script>
        window.addEventListener('DOMContentLoaded', () => {
            // Find the Overall Strength Score in the analysis text
            const analysisText = document.querySelector('.analysis-content pre').textContent;
            const scoreMatch = analysisText.match(/Overall Strength Score:\s*(\d+(?:\.\d+)?)/);
            const score = scoreMatch ? parseFloat(scoreMatch[1]) : 0;
            
            const circle = document.getElementById('score-circle');
            const scoreText = document.querySelector('.score-text');
            const circumference = 2 * Math.PI * 60;
            
            circle.style.strokeDasharray = `${circumference}`;
            circle.style.strokeDashoffset = circumference;
            
            setTimeout(() => {
                const offset = circumference - (score / 10 * circumference);
                circle.style.strokeDashoffset = offset;
                circle.style.transition = 'stroke-dashoffset 1s ease-in-out';
                
                let current = 0;
                const increment = score / 50; // Smoother animation with 50 steps
                const interval = setInterval(() => {
                    if (current >= score) {
                        scoreText.textContent = `${score.toFixed(1)}/10`;
                        clearInterval(interval);
                    } else {
                        current += increment;
                        scoreText.textContent = `${current.toFixed(1)}/10`;
                    }
                }, 20);
            }, 500);
        });
    </script>
</body>
</html>